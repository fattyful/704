ECSController(	input signal Occupied, NOccupied, UnderLightLimit, OverLightLimit,RightLightLimit;
				input signal Brighted, RightLighted;
				input signal UnderTemp, OverTemp, RightTemp, Faned, Heatered, TRed;
				input signal AlarmAlerted, AlertAlarm;
				input signal One, Two, Three, Four, Five, Six, Seven;
				output signal BrightH, BrightL;
				output signal Fan, Heater, TR;
				output signal RightLight, AlarmAlert;
				output signal OccupiedE, NOccupiedE,  AlarmAlertE;
			)
			
		
->{
	class GUI implements java.lang.Runnable {
		public void run() {
			org.compsys704.CapLoader.main(null);
		}
	}
	new Thread(new GUI()).start();
	
	signal one, seven;
	
	{ //light controller

		while(true){
			abort(NOccupied){
				await(Occupied);
				loop{
				
					await(UnderLightLimit || OverLightLimit || RightLightLimit);
						
						//zone1s lighting is under limit
						present (UnderLightLimit){
							abort(Brighted){
								emit BrightL;
							}
						}

						//zone1s lighting is over limit
						present (OverLightLimit){
							abort(Brighted){
								emit BrightH;
							}
						}
						
						
							
						//zone1s light limit is met
						present (RightLightLimit){
							abort(RightLighted){
								emit RightLight;
							}
						}
				}
					
			}
		//Start Timer
		//if Timer run out close all blinds and turn off Light
		System.out.println("No one is in the room");
		}
	}
	
	||
	
	{ //Temperature controller
		while(true){
			abort(NOccupied){
				await(Occupied);
				loop{
					await(UnderTemp || OverTemp || RightTemp);
						
						//zone1s lighting is under limit
						present (UnderTemp){
							abort(Heatered){
								emit Heater;
							}
						}

						
							
						//zone1s lighting is over limit
						present (OverTemp){
							abort(Faned){
								emit Fan;
							}
						}
						
							
						//zone1s light limit is met
						present (RightTemp){
							abort(TRed){
								emit TR;
							}
						}
					}
				}	
			
		//Start Timer
		//if Timer run out close all blinds and turn off Light
		System.out.println("No one is in the room");
		}
	}

	||
	
	{//FireAlarm
		while(true){
			await(AlertAlarm);
			abort(AlarmAlerted){
				emit AlarmAlert;
			}
		}	
	}
	
	||
	
	{//Detect Zone
		while(true){
			await(One || Seven);
		
				present(One){
					abort(!One){
						sustain one;
					}
				}
				
				present(Seven){
					abort(!Seven){
						sustain seven;
					}
				}
		}
	}
	
	||
	
	{// TO viz
		{while(true){present(!Occupied){emit OccupiedE;} pause;}}
		||
		{while(true){present(!NOccupied){emit NOccupiedE;} pause;}}

		||
		{while(true){present(AlarmAlert){emit AlarmAlertE;} pause;}}
	}
}
